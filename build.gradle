plugins {
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}
apply from: 'gradle/version.gradle'

version = versions.getVersion()
println "Mod version: $version"

sourceSets {
    data
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/'
    }
}

print "Java: ${System.getProperty('java.version')}"
print ", JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})"
println ", Arch: ${System.getProperty('os.arch')}"

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        configureEach {
            workingDirectory project.file('run/' + it.name) as File

            property 'forge.logging.markers', logging_markers
            property 'forge.logging.console.level', logging_console

            ideaModule "${project.name}.main"
            mods.register(modid as String) {
                source sourceSets.main as SourceSet
            }

            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client {
        }

        server {
        }

        data {
            args '--mod', modid, '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            ideaModule "${project.name}.data"
            mods.named(modid as String) {
                sources sourceSets.main as SourceSet, sourceSets.data as SourceSet
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
    shadow.extendsFrom library

    dataImplementation.extendsFrom implementation
}

repositories {
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    library(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
        exclude module: 'slf4j-api'
    }
    //library group: 'club.minnced', name: 'discord-webhooks', version: webhook_version

    dataImplementation sourceSets.main.output
}

java {
    archivesBaseName = "${project.name}-${mc_version}"
    toolchain.languageVersion = JavaLanguageVersion.of(16)
    withSourcesJar()
}

var manifestAttributes = [
        'Specification-Title'   : modid,
        'Specification-Vendor'  : author,
        'Specification-Version' : versions.getRawVersion(),
        'Implementation-Title'  : project.name,
        'Implementation-Version': versions.getVersion(),
        'Implementation-Vendor' : author,
        "Git-Commit"            : versions.getCommitId(),
        "Git-Commit-Timestamp"  : versions.getCommitTimestamp()
] as LinkedHashMap

tasks.withType(Jar).configureEach {
    manifest.attributes(manifestAttributes)
    includeEmptyDirs false
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

tasks.named('jar', Jar).configure {
    finalizedBy 'reobfJar'
    archiveClassifier.set('lite')
}
@SuppressWarnings('GrMethodMayBeStatic')
def relocate(origin) {
    shadowJar.relocate(origin, "tk.sciwhiz12.concord.shadow.$origin")
}

// noinspection UnnecessaryQualifiedReference
tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).configure {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier.set('')
    relocate 'com.iwebpp.crypto'
    relocate 'org.json'
    relocate 'net.sf.trove4j'
    relocate 'gnu.trove'

    relocate 'com.neovisionaries.ws.client'
    relocate 'okio'
    relocate 'okhttp3'

    relocate 'org.intellij.lang.annotations'
    relocate 'org.jetbrains.annotations'

    relocate 'org.apache.commons.collections4'
    relocate 'org.slf4j'
    relocate 'javax.annotation'
    relocate 'com.fasterxml.jackson'

    relocate 'net.dv8tion.jda'
    relocate 'club.minnced.discord.webhook'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'module-info.class'

    finalizedBy 'reobfShadowJar'
}

tasks.named('assemble') {
    dependsOn shadowJar
}

reobf {
    shadowJar {}
}

// Without these two, Gradle will issue warnings about task inputs from other tasks outputs without declaring dependencies
tasks.named('reobfShadowJar') { dependsOn tasks.named('jar') }
tasks.named('shadowJar') { dependsOn 'reobfJar' }

// noinspection UnnecessaryQualifiedReference
tasks.withType(net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace) {
    args.add('--stable')
}

publishing {
    publications.create('mavenJava', MavenPublication) {
        project.shadow.component(it)
        it.artifact(tasks.named('jar'))
        it.artifact(tasks.named('sourcesJar'))

        it.artifactId = project.name
        it.version = "$mc_version-${versions.getRawVersion()}${versions.isSnapshot() ? '-SNAPSHOT' : ''}"
    }

    repositories {
        maven {
            name 'projectLocal'
            url "file://${project.file('repo').absolutePath}"
        }
    }
}
