buildscript {
    repositories {
        maven {
            name = "MinecraftForge"
            url = 'https://files.minecraftforge.net/maven'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-gradle', 'version': '4.0.2'
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '4.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply from: 'version.gradle'

group = 'tk.sciwhiz12'
archivesBaseName = "concord"
def mod_version = versionInfo["version"] ?: "unknown"
version = "${mod_version}"

println("Mod version: ${mod_version}")
println('Java: ' + System.getProperty('java.version') + '; JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + '); Arch: ' + System.getProperty('os.arch'))

sourceSets {
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/' // Prevents the .cache file from being included in the jars
    }
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
    jcenter()
    mavenCentral()
}

minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"

    runs {
        client {
            workingDirectory file('run/client')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            mods {
                concord {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run/server')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            mods {
                concord {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run/data')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'concord', '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            ideaModule "${project.name}.data"
            mods {
                concord {
                    sources sourceSets.main, sourceSets.data
                }
            }
        }
    }
}

configurations {
    dataImplementation.extendsFrom implementation
    shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    shade(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
    }
    shade group: 'club.minnced', name: 'discord-webhooks', version: webhook_version

    // This is doubled because it somehow fixes dev-runs erroring with NoClassDefFoundError
    implementation(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
    }
    implementation group: 'club.minnced', name: 'discord-webhooks', version: webhook_version

    dataImplementation sourceSets.main.output
    dataCompileClasspath sourceSets.main.compileClasspath
}

def commit_id = "unknown"
def git_timestamp = "unknown"
try {
    commit_id = grgit.head().id
    def datetime = grgit.head().dateTime
    git_timestamp = datetime.toLocalDateTime().toString() + datetime.getOffset().toString().replace(':', '');
} catch (Exception e) {
    logger.error("Error while trying to get commit info: {}", e)
}
jar {
    manifest {
        attributes([
                "Specification-Title"   : "concord",
                "Specification-Vendor"  : "sciwhiz12",
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" : "sciwhiz12",
                "Build-Timestamp"       : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Git-Commit"            : commit_id,
                "Git-Commit-Timestamp"  : git_timestamp
        ] as LinkedHashMap)
    }
    includeEmptyDirs false
    archivesBaseName = "concord-${mc_version}"
    version = mod_version
}

def relocate(origin) {
    shadowJar.relocate(origin, "tk.sciwhiz12.concord.shadow.$origin")
}

shadowJar {
    classifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.iwebpp.crypto'
    relocate 'org.json'
    relocate 'net.sf.trove4j'
    relocate 'gnu.trove'

    relocate 'com.neovisionaries.ws.client'
    relocate 'okio'
    relocate 'okhttp3'

    relocate 'org.intellij.lang.annotations'
    relocate 'org.jetbrains.annotations'

    relocate 'org.apache.commons.collections4'
    relocate 'org.slf4j'
    relocate 'javax.annotation'
    relocate 'com.fasterxml.jackson'

    relocate 'net.dv8tion.jda'
    relocate 'club.minnced.discord.webhook'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'module-info.class'
}

 reobf {
    shadowJar {}
}

jar {
    classifier = 'lite'
    finalizedBy 'reobfJar'
    finalizedBy 'sourcesJar'
    finalizedBy 'reobfShadowJar'
}

build.dependsOn('reobfShadowJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "concord"
            version = "${versionInfo["raw_version"]}-${mc_version}${versionInfo["snapshot"] ? "-SNAPSHOT" : ""}"
            artifact(jar) {
                classifier = ""
            }
            artifact(shadowJar) {
                classifier = "shadow"
            }
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = "file://" + file("repo").getAbsolutePath() + "/"
        }
    }
}
