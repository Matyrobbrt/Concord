buildscript {
    repositories {
        maven {
            name = "MinecraftForge"
            url = 'https://maven.minecraftforge.net'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}
apply plugin: 'net.minecraftforge.gradle'
apply from: 'version.gradle'

group = 'tk.sciwhiz12'
archivesBaseName = "concord"
def mod_version = versionInfo["version"] ?: "unknown"
version = "${mod_version}"

println("Mod version: ${mod_version}")
println('Java: ' + System.getProperty('java.version') + '; JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + '); Arch: ' + System.getProperty('os.arch'))

sourceSets {
    main.resources {
        srcDirs += data.resources.srcDirs
        exclude '.cache/' // Prevents the .cache file from being included in the jars
    }
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }
    mavenCentral()
}

minecraft {
    mappings channel: 'official', version: "${mc_version}"

    runs {
        client {
            workingDirectory file('run/client')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            mods {
                concord {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run/server')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            mods {
                concord {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run/data')

            property 'forge.logging.markers', "${logging_markers}"
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'concord', '--all'
            args '--output', sourceSets.data.resources.srcDirs[0].toString()
            args '--existing', sourceSets.main.resources.srcDirs[0].toString()

            ideaModule "${project.name}.data"
            mods {
                concord {
                    sources sourceSets.main, sourceSets.data
                }
            }
        }
    }
}

configurations {
    dataImplementation.extendsFrom implementation
    dataCompileClasspath.extendsFrom compileClasspath
    shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    shade(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
    }
    shade group: 'club.minnced', name: 'discord-webhooks', version: webhook_version

    // This is doubled because it somehow fixes dev-runs erroring with NoClassDefFoundError
    implementation(group: 'net.dv8tion', name: 'JDA', version: jda_version) {
        exclude module: 'opus-java'
    }
    implementation group: 'club.minnced', name: 'discord-webhooks', version: webhook_version

    dataImplementation sourceSets.main.output
}

jar {
    manifest {
        attributes([
                "Specification-Title"   : "concord",
                "Specification-Vendor"  : "sciwhiz12",
                "Implementation-Title"  : project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" : "sciwhiz12",
                "Git-Commit"            : versionInfo["hash"] ?: "0000000000000000000000000000000000000000",
                "Git-Commit-Timestamp"  : versionInfo["timestamp"] ?: "1980-01-01T00:00:00+00:00"
        ] as LinkedHashMap)
    }
    includeEmptyDirs false
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archivesBaseName = "concord-${mc_version}"
    archiveVersion = mod_version

    archiveClassifier = 'lite'
    finalizedBy 'reobfJar'
    finalizedBy 'sourcesJar'
}

def relocate(origin) {
    shadowJar.relocate(origin, "tk.sciwhiz12.concord.shadow.$origin")
}

shadowJar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.iwebpp.crypto'
    relocate 'org.json'
    relocate 'net.sf.trove4j'
    relocate 'gnu.trove'

    relocate 'com.neovisionaries.ws.client'
    relocate 'okio'
    relocate 'okhttp3'

    relocate 'org.intellij.lang.annotations'
    relocate 'org.jetbrains.annotations'

    relocate 'org.apache.commons.collections4'
    relocate 'org.slf4j'
    relocate 'javax.annotation'
    relocate 'com.fasterxml.jackson'

    relocate 'net.dv8tion.jda'
    relocate 'club.minnced.discord.webhook'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/proguard/**'
    exclude 'META-INF/services/**'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
    exclude 'module-info.class'

    finalizedBy 'reobfShadowJar'

    assemble.dependsOn shadowJar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    archiveClassifier = 'sources'
}

reobf {
    shadowJar {}
}

tasks.withType(net.minecraftforge.gradle.userdev.tasks.RenameJarInPlace) {
    String[] args = getArgs()
    args += "--stable"
    setArgs(args)
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "concord"
            version = "${versionInfo["raw_version"]}-${mc_version}${versionInfo["snapshot"] ? "-SNAPSHOT" : ""}"
            artifact(jar) {
                classifier = ""
            }
            artifact(shadowJar) {
                classifier = "shadow"
            }
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = "file://" + file("repo").getAbsolutePath() + "/"
        }
    }
}
